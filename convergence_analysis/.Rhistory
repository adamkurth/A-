} else {
data <- rbind(data, temp_data)
}
}
return(data)
}
getwd()
same_data_files <- list.files(path = "/Users/adamkurth/Documents/vscode/python_4_fun/A_star/Mountain_Search_Project/convergence_analysis/same_data", pattern = "\\.csv", full.names = TRUE)
data_same <- load_data(same_data_files)
half_data_files <- list.files(path = "/Users/adamkurth/Documents/vscode/python_4_fun/A_star/Mountain_Search_Project/convergence_analysis/half_data", pattern = "\\.csv", full.names = TRUE)
data_half <- load_data(half_data_files)
double_data_files <- list.files(path = "/Users/adamkurth/Documents/vscode/python_4_fun/A_star/Mountain_Search_Project/convergence_analysis/double_data", pattern = "\\.csv", full.names = TRUE)
data_double <- load_data(double_data_files)
# Visualization of convergence time for data_same with jitter
# Scatter plot for data_same
plot_same <- ggplot(data_same, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Convergence Time (s)") +
ylab("Number of Nodes") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_same)") +
theme_minimal()
# Scatter plot for data_half
plot_half <- ggplot(data_half, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Convergence Time (s)") +
ylab("Number of Nodes") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_half)") +
theme_minimal()
# Scatter plot for data_double
plot_double <- ggplot(data_double, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Convergence Time (s)") +
ylab("Number of Nodes") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_double)") +
theme_minimal()
# Histogram for data_same
histogram_same <- ggplot(data_same, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_same)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Histogram for data_half
histogram_half <- ggplot(data_half, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_half)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Histogram for data_double
histogram_double <- ggplot(data_double, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_double)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Create a grid of plots for all three data groups
grid <- grid.arrange(
ggarrange(plot_same, histogram_same, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_half, histogram_half, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_double, histogram_double, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ncol = 1, nrow = 3
)
grid
grid <- grid.arrange(
ggarrange(plot_same, histogram_same, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_half, histogram_half, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_double, histogram_double, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ncol = 1, nrow = 3
)
grid
################################################################################
# Density plot for data_half
density_plot_half <- ggplot(data_half, aes(x = Convergence.Time)) +
geom_density(fill = "#0072B2", alpha = 0.5) +
xlab("Convergence Time (s)") +
ylab("Density") +
ggtitle("Estimated Density Plot of Convergence Time (data_half)") +
theme_minimal()
# Density plot for data_double
density_plot_double <- ggplot(data_double, aes(x = Convergence.Time)) +
geom_density(fill = "#0072B2", alpha = 0.5) +
xlab("Convergence Time (s)") +
ylab("Density") +
ggtitle("Estimated Density Plot of Convergence Time (data_double)") +
theme_minimal()
# Density plot for data_same
density_plot_same <- ggplot(data_same, aes(x = Convergence.Time)) +
geom_density(fill = "#0072B2", alpha = 0.5) +
xlab("Convergence Time (s)") +
ylab("Density") +
ggtitle("Estimated Density Plot of Convergence Time (data_same)") +
theme_minimal()
# Create a grid of plots for all three data groups
grid <- grid.arrange(
density_plot_half,
density_plot_double,
density_plot_same,
ncol = 1, nrow = 3
)
grid
# Scatter plot of Total Traffic Cost vs Convergence Time for data_same
scatter_plot_same <- ggplot(data_same, aes(x = Total.Cost, y = Convergence.Time)) +
geom_point(color = "#0072B2", size = 3) +
xlab("Total Traffic Cost") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Total Traffic Cost vs Convergence Time (data_same)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Scatter plot of Total Traffic Cost vs Convergence Time for data_half
scatter_plot_half <- ggplot(data_half, aes(x = Total.Cost, y = Convergence.Time)) +
geom_point(color = "#0072B2", size = 3) +
xlab("Total Traffic Cost") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Total Traffic Cost vs Convergence Time (data_half)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Scatter plot of Total Traffic Cost vs Convergence Time for data_double
scatter_plot_double <- ggplot(data_double, aes(x = Total.Cost, y = Convergence.Time)) +
geom_point(color = "#0072B2", size = 3) +
xlab("Total Traffic Cost") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Total Traffic Cost vs Convergence Time (data_double)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Create a grid of scatter plots for all three data frames
grid <- grid.arrange(
scatter_plot_same,
scatter_plot_half,
scatter_plot_double,
ncol = 1, nrow = 3
)
grid
grid <- grid.arrange(
scatter_plot_same,
scatter_plot_half,
scatter_plot_double,
ncol = 1, nrow = 3
)
grid
# Create the histograms for data_same
histogram_total_same <- ggplot(data_same, aes(x = Total.Cost)) +
geom_histogram(bins = 30, fill = "#0072B2", color = "black") +
xlab("Total Cost") +
ylab("Frequency") +
ggtitle("Histogram of Total Cost (data_same)") +
theme_minimal()
histogram_raw_same <- ggplot(data_same, aes(x = Raw.Cost)) +
geom_histogram(bins = 30, fill = "#E69F00", color = "black") +
xlab("Raw Cost") +
ylab("Frequency") +
ggtitle("Histogram of Raw Cost (data_same)") +
theme_minimal()
histogram_traffic_same <- ggplot(data_same, aes(x = Traffic.Cost)) +
geom_histogram(bins = 30, fill = "#009E73", color = "black") +
xlab("Traffic Cost") +
ylab("Frequency") +
ggtitle("Histogram of Traffic Cost (data_same)") +
theme_minimal()
# Create the histograms for data_half
histogram_total_half <- ggplot(data_half, aes(x = Total.Cost)) +
geom_histogram(bins = 30, fill = "#0072B2", color = "black") +
xlab("Total Cost") +
ylab("Frequency") +
ggtitle("Histogram of Total Cost (data_half)") +
theme_minimal()
histogram_raw_half <- ggplot(data_half, aes(x = Raw.Cost)) +
geom_histogram(bins = 30, fill = "#E69F00", color = "black") +
xlab("Raw Cost") +
ylab("Frequency") +
ggtitle("Histogram of Raw Cost (data_half)") +
theme_minimal()
histogram_traffic_half <- ggplot(data_half, aes(x = Traffic.Cost)) +
geom_histogram(bins = 30, fill = "#009E73", color = "black") +
xlab("Traffic Cost") +
ylab("Frequency") +
ggtitle("Histogram of Traffic Cost (data_half)") +
theme_minimal()
# Create the histograms for data_double
histogram_total_double <- ggplot(data_double, aes(x = Total.Cost)) +
geom_histogram(bins = 30, fill = "#0072B2", color = "black") +
xlab("Total Cost") +
ylab("Frequency") +
ggtitle("Histogram of Total Cost (data_double)") +
theme_minimal()
histogram_raw_double <- ggplot(data_double, aes(x = Raw.Cost)) +
geom_histogram(bins = 30, fill = "#E69F00", color = "black") +
xlab("Raw Cost") +
ylab("Frequency") +
ggtitle("Histogram of Raw Cost (data_double)") +
theme_minimal()
histogram_traffic_double <- ggplot(data_double, aes(x = Traffic.Cost)) +
geom_histogram(bins = 30, fill = "#009E73", color = "black") +
xlab("Traffic Cost") +
ylab("Frequency") +
ggtitle("Histogram of Traffic Cost (data_double)") +
theme_minimal()
# Create the grid of plots
grid <- grid.arrange(
histogram_total_same, histogram_raw_same, histogram_traffic_same,
histogram_total_half, histogram_raw_half, histogram_traffic_half,
histogram_total_double, histogram_raw_double, histogram_traffic_double,
ncol = 3, nrow = 3
)
# Display the grid
grid
grid <- grid.arrange(
histogram_total_same, histogram_raw_same, histogram_traffic_same,
histogram_total_half, histogram_raw_half, histogram_traffic_half,
histogram_total_double, histogram_raw_double, histogram_traffic_double,
ncol = 3, nrow = 3
)
# Display the grid
grid
data1 <- rbind(data_same, data_half, data_double)
numeric_data <- data1[sapply(data1, is.numeric)]
numeric_data <- subset(numeric_data, select = -Elevation.Function)
full_model <- lm(Convergence.Time ~ ., data = numeric_data)
stepwise_model <- stepAIC(full_model, direction = "both")
# poly_model <- lm(Convergence.Time ~ poly(Number.of.Nodes,2), data=data1)
m1 = lm(Convergence.Time ~ Raw.Cost + Total.Cost + Number.of.Nodes + Number.of.Connections, data=data1)
m2 = lm(Convergence.Time ~ Raw.Cost + Total.Cost + Number.of.Nodes, data=data1)
anova(m1, m2)
# the reduced model is a better fit, so we will use that
poly_model <- m2
# we see that Raw.Cost and Number.of.Nodes are the two lowest p-values, so we will use those two
par(mfrow=c(2,2))
plot(poly_model)
par(mfrow=c(1,1))
car::influencePlot(poly_model)
anova(poly_model)
summary(poly_model)
summary(poly_model)$r.squared
summary(poly_model)$adj.r.squared
summary(poly_model)$coefficients
View(plot_same)
View(data1)
grid <- grid.arrange(plot_same, plot_half, plot_double, ncol = 3, nrow = 1, legend = "none")
# Visualization of convergence time for data_same with jitter
# Scatter plot for data_same
plot_same <- ggplot(data_same, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Number of Nodes") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_same)") +
theme_minimal()
# Scatter plot for data_half
plot_half <- ggplot(data_half, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Number of Nodes") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_half)") +
theme_minimal()
# Scatter plot for data_double
plot_double <- ggplot(data_double, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Number of Nodes") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_double)") +
theme_minimal()
# Histogram for data_same
histogram_same <- ggplot(data_same, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_same)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Histogram for data_half
histogram_half <- ggplot(data_half, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_half)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Histogram for data_double
histogram_double <- ggplot(data_double, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_double)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
grid <- grid.arrange(plot_same, plot_half, plot_double, ncol = 3, nrow = 1, legend = "none")
grid <- grid.arrange(plot_same, plot_half, plot_double, ncol = 3, nrow = 1)
grid
# Create a grid of plots for all three data groups
grid <- grid.arrange(
ggarrange(plot_same, histogram_same, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_half, histogram_half, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_double, histogram_double, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ncol = 1, nrow = 3
)
grid
# Create a grid of plots for all three data groups
grid <- grid.arrange(
ggarrange(plot_same, histogram_same, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_half, histogram_half, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_double, histogram_double, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ncol = 1, nrow = 3
)
grid
# Visualization of convergence time for data_same with jitter
# Scatter plot for data_same
plot_same <- ggplot(data_same, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Number of Nodes") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_same)") +
theme_minimal()
# Scatter plot for data_half
plot_half <- ggplot(data_half, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Number of Nodes") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_half)") +
theme_minimal()
# Scatter plot for data_double
plot_double <- ggplot(data_double, aes(x = Number.of.Nodes, y = Convergence.Time, color = Convergence.Time)) +
geom_point(position = position_jitter(width = 0.2, height = 0.2)) +
xlab("Number of Nodes") +
ylab("Convergence Time (s)") +
ggtitle("Scatter Plot of Convergence Time vs Number of Nodes (data_double)") +
theme_minimal()
# Histogram for data_same
histogram_same <- ggplot(data_same, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_same)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Histogram for data_half
histogram_half <- ggplot(data_half, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_half)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
# Histogram for data_double
histogram_double <- ggplot(data_double, aes(x = Convergence.Time)) +
geom_histogram(bins = 15, fill = "#0072B2", color = "black") +
xlab("Convergence Time (s)") +
ylab("Frequency") +
ggtitle("Histogram of Convergence Time (data_double)") +
theme_minimal() +
theme(plot.title = element_text(color = "#0072B2", size = 14, face = "bold"),
axis.title.x = element_text(color = "#0072B2", size = 12),
axis.title.y = element_text(color = "#0072B2", size = 12),
axis.text = element_text(color = "#0072B2", size = 10),
panel.background = element_rect(fill = "#F0F0F0"),
panel.grid.major = element_line(color = "#D3D3D3"),
panel.grid.minor = element_blank())
grid <- grid.arrange(plot_same, plot_half, plot_double, ncol = 3, nrow = 1)
grid
# Create a grid of plots for all three data groups
grid <- grid.arrange(
ggarrange(plot_same, histogram_same, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_half, histogram_half, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_double, histogram_double, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ncol = 1, nrow = 3
)
grid
grid <- grid.arrange(
ggarrange(plot_same, histogram_same, ncol = 3, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_half, histogram_half, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ggarrange(plot_double, histogram_double, ncol = 2, nrow = 1, common.legend = TRUE, legend = "bottom"),
ncol = 1, nrow = 3
)
grid
# Fit the full model
full_model <- lm(Convergence.Time ~ ., data = numeric_data)
# Perform stepwise regression using BIC for model selection
stepwise_model <- stepAIC(full_model, direction = "both", k = log(nrow(numeric_data)))
full_model <- lm(Convergence.Time ~ ., data = numeric_data)
stepwise_model <- stepAIC(full_model, direction = "both", k = log(nrow(numeric_data)))
data1$Number.of.Nodes.2 = (data1$Number.of.Nodes)^2
m2 = lm(Convergence.Time ~ Total.Cost + Traffic.Cost + Number.of.Nodes + Number.of.Nodes.2, data=data1)
anova(m2)
summary(m2)
anova(m1,m2)
numeric_data <- data1[sapply(data1, is.numeric)]
numeric_data <- subset(numeric_data, select = -Elevation.Function)
full.model = lm(Convergence.Time ~ ., data = numeric_data)
stepwise_model <- stepAIC(full.model, direction = "both", k = log(nrow(numeric_data)))
# the reduced model is a better fit, so we will use that
poly_model <- m2
# we see that Raw.Cost and Number.of.Nodes are the two lowest p-values, so we will use those two
par(mfrow=c(2,2))
plot(poly_model)
par(mfrow=c(1,1))
plot(poly_model, which = 1)
car::influencePlot(poly_model)
source("~/Documents/vscode/python_4_fun/A_star/Mountain_Search_Project/convergence_analysis/main.r", echo=TRUE)
# Create a data frame with the fitted values and residuals
residuals_df <- data.frame(
Fitted = fitted(poly_model),
Residuals = residuals(poly_model)
)
# Create a scatter plot of fitted values versus actual values
ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Fitted Values", y = "Actual Values", title = "Scatter Plot of Fitted Values vs Actual Values") +
theme_minimal()
residuals_df <- data.frame(
Fitted = fitted(poly_model),
Residuals = residuals(poly_model)
)
# Create a scatter plot of fitted values versus actual values with jitter
a <- ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
geom_point(position = position_jitter(width = 0.02, height = 0.02) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Fitted Values", y = "Actual Values", title = "Scatter Plot of Fitted Values vs Actual Values") +
theme_minimal()
b <- ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
# Create a data frame with the fitted values and residuals
residuals_df <- data.frame(
Fitted = fitted(poly_model),
Residuals = residuals(poly_model)
)
# Create a scatter plot of fitted values versus actual values with jitter
a <- ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
geom_point(position = position_jitter(width = 0.02, height = 0.02) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Fitted Values", y = "Actual Values", title = "Scatter Plot of Fitted Values vs Actual Values") +
theme_minimal()
b <- ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
library(ggplot2)
# Create a data frame with the fitted values and residuals
residuals_df <- data.frame(
Fitted = fitted(poly_model),
Residuals = residuals(poly_model)
)
# Create a scatter plot of fitted values versus actual values with jitter
a <- ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
geom_point(position = position_jitter(width = 0.02, height = 0.02) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(x = "Fitted Values", y = "Actual Values", title = "Scatter Plot of Fitted Values vs Actual Values") +
theme_minimal()
b <- ggplot(residuals_df, aes(x = Fitted, y = data1$Convergence.Time)) +
